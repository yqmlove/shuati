class Solution {
public:
    int findCircleNum(vector<vector<int>>& M) {
        int m = M.size(),res = 0;       
        vector<bool> visit(m, false);
        for (int i = 0; i < m; i++) {           
            if (visit[i]) continue;
            helper(M, i, visit);
            res++;
            }
        return res;
    }
    void helper(vector<vector<int>>& M, int i, vector<bool> &visit) {
        visit[i] = true;
        for (int k = 0; k < M[0].size(); k++) {
            if(visit[k] || !M[i][k]) continue;
            helper(M, k, visit);
        }
    }
};

class Solution {
public:
    int findCircleNum(vector<vector<int>>& M) {
        int n = M.size(), res = 0;
        vector<bool> visited(n, false);
        queue<int> q;
        for (int i = 0; i < n; ++i) {
            if (visited[i]) continue;
            q.push(i);
            while (!q.empty()) {
                int t = q.front(); q.pop();
                visited[t] = true;
                for (int j = 0; j < n; ++j) {
                    if (!M[t][j] || visited[j]) continue;
                    q.push(j);
                }
            }
            ++res;
        }
        return res;
    }
};

class Solution {
public:
    int findCircleNum(vector<vector<int>>& M) {
        int m = M.size(),res = m;       
        vector<int> root(m);
        for(int i = 0; i < m; i++) root[i] = i;
        for (int i = 0; i < m; i++) {
            for (int j = i + 1; j < m; j++) {
                if(M[i][j] == 1) {
                    int p1 = getRoot(root, i);
                    int p2 = getRoot(root, j);
                    if (p1 != p2) {
                        res--;
                        root[p2] = p1;
                    }
                }
            }
        }
        return res;
    }
    
    int getRoot(vector<int>& root, int i) {
        while (i != root[i]) {
            root[i] = root[root[i]];
            i = root[i];
        }
        return i;
    }
};
