class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int res = 0, l = 0, r = 0, m = s.size();
        unordered_set <char> myset;
        while(r < m) {
            if (!myset.count(s[r])) {
                myset.insert(s[r++]);
                res = max(res, (int)myset.size());
            }
            else myset.erase(s[l++]);
        }
        return res;
    }
};
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int size = s.size();
        if (s.empty()) return 0;
        int start =0, end =0;
        int hash[256] = {0};
        int res = -1;
        while (end<size)
        {
            if (hash[s[end]]==0)
                hash[s[end++]]++;
            else
                hash[s[start++]]--;
            res = max(res,end-start);    
        }
        return res;
    }
};
