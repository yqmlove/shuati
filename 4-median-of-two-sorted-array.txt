class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size(), n = nums2.size();
        int total = m + n;
        if(total & 0x1) return getKth(nums1.data(), m, nums2.data(), n, total/2 + 1);
        else return (getKth(nums1.data(), m, nums2.data(), n, total/2) + getKth(nums1.data(), m, nums2.data(), n, total/2 + 1))/2.0;
    }
    
    double getKth(int A[], int m, int B[], int n, int K) {
        if(m > n) return getKth(B, n, A, m, K);
        if(m == 0) return B[K-1];
        if(K == 1) return min(A[0], B[0]);
        
        int i = min(m, K/2), j = K-i;
        if(A[i-1] < B[j-1]) return getKth(A + i, m - i, B, n, K-i);
        else return getKth(A, m, B+j, n-j, K - j);        
    }
};
