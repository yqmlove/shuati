class Solution {
public:
    int threeSumMulti(vector<int>& A, int target) {
        long res = 0, n = A.size(), M = 1e9 + 7;
        sort(A.begin(), A.end());
        for (int i = 0; i < n - 2; ++i) {
            int sum = target - A[i];
            int j = i + 1, k = n - 1;
            while (j < k) {
                if (A[j] + A[k] < sum) {
                    ++j;
                } else if (A[j] + A[k] > sum) {
                    --k;
                } else {
                    int left = 1, right = 1;
                    while (j + left < k && A[j + left] == A[j]) ++left;
                    while (j + left <= k - right && A[k - right] == A[k]) ++right;
                    res += A[j] == A[k] ? (k - j + 1) * (k - j) / 2 : left * right;
                    j += left;
                    k -= right;
                }
            }
        }
        return res % M;
    }
};

class Solution {
public:
    int threeSumMulti(vector<int>& A, int target) {
        int res = 0, n = A.size(), M = 1e9 + 7;
        unordered_map<int, int> numCnt;
        for (int i = 0; i < n; ++i) {
            res = (res + numCnt[target - A[i]]) % M;
            for (int j = 0; j < i; ++j) {
                int sum = A[i] + A[j];
                ++numCnt[sum];
            }
        }
        return res;
    }
};
