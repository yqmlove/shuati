class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        int diff = accumulate(nums.begin(), nums.end(), 0, bit_xor<int>());
        diff &= -diff;
        vector<int> res(2, 0);
        for (auto &a : nums) {
            if (a & diff) res[0] ^= a;
            else res[1] ^= a;
        }
        return res;
    }
};

class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        int t =0,first = 0,second =0;
        for(int i : nums) t^=i;
        int rightmost = t & ~(t-1);
        for(int i: nums)
        {
            if(rightmost & i) first^=i;
            else second^=i;
        }
        return {first,second};
    }
};
